# coding: utf-8

class Array
    def AddIndentToStrs(indent = "")
        self.map! { |item| indent + item }
    end
end



def PrintFormatBinData(data, count_one_line) 
    str_out_ary = []
    s_idx = 0
    e_idx = s_idx + count_one_line
    e_idx = data.size if e_idx > data.size;
    while s_idx < data.size
        str_out_ary.push data[s_idx...e_idx].map{|i| "%02X" % i }.join(" ")
        s_idx = e_idx
        e_idx = s_idx + count_one_line;
        e_idx = data.size if e_idx > data.size;
    end
    str_out_ary.AddIndentToStrs("| ")
end

def PrintStrFieldAsString(field_name, data) 
    output_str_ary = []
    str = data.map{|i| i.chr }.join()
    output_str_ary.push "%s : [%s] " % [field_name, str]
    yield str if block_given?
    output_str_ary += PrintFormatBinData(data, 16).AddIndentToStrs(" " * (field_name.size + 1))
end

def PrintAllStr(str_ary)
    str_ary.each do |item|
        puts item
    end
end

def PrintNumFieldAsString(field_name, data) 
    output_str_ary = []
    num = data.map{|i| "%02X" % i }.join().to_i(16)
    output_str_ary.push "%s : [%s] " % [field_name, num.to_s]
    yield num if block_given?
    output_str_ary += PrintFormatBinData(data, 16).AddIndentToStrs(" " * (field_name.size + 1))
end

def PrintOctFieldAsString(field_name, data) 
    output_str_ary = []
    oct_str = data.map{|i| "%02X" % i }.join()
    output_str_ary.push "%s : [%s] " % [field_name, oct_str]
    yield oct_str if block_given?
    output_str_ary += PrintFormatBinData(data, 16).AddIndentToStrs(" " * (field_name.size + 1))
end

def PrintDataByDataStructDescription(data_form, data)
    print_by_types = {
        :NUM_FIELD => method(:PrintNumFieldAsString),
        :STR_FIELD => method(:PrintStrFieldAsString),
        :OCT_FIELD => method(:PrintOctFieldAsString)
    }

    output_str_ary = []    
    current = 0
    data_form.each do |field|
        if field[:filed_update] != nil then
            field[:field_size] = field[:filed_update].call() 
        end
        output_str_ary += print_by_types[field[:field_type]].call(
            field[:field_name], data[current...(current + field[:field_size])]) {|content| field[:field_content] = content} 
        current += field[:field_size]
    end
    output_str_ary
end

# direction | string | : "Server->Client" or "Client->Server"
def PrintSSHHello(data, direction)
    puts "PrintSSHHello"
    output_str_ary = [
        "=======================================================================",
        ">>PrintSSHHello   " + direction, 
        "-----------------------------------------------------------------------"]

    data_format = [
        {:field_name => "Protocal", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0,
         :filed_update => ->() { data.map{|i| "%02X" % i }.join().index("0D0A") / 2 + 2 } }
    ]
    output_str_ary += PrintDataByDataStructDescription(data_format, data)

    total_size = 0
    data_format.each do |item|
        total_size += item[:field_size]
    end
    yield total_size if block_given?
    output_str_ary[1] += " [Total : %d bytes ] " % total_size
    output_str_ary
end

def PrintKeyExchangeInit(data, direction)
    puts "PrintKeyExchangeInit"
    output_str_ary = [
        "=======================================================================",
        ">>PrintKeyExchangeInit   " + direction, 
        "-----------------------------------------------------------------------"]

    data_format = [
        {:field_name => "Packet length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Padding length", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Message Code", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Cookie", :field_size => 16, :field_type => :OCT_FIELD, :field_content => 0},
        {:field_name => "Kex_algorithms length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Kex_algorithms string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Kex_algorithms length"}[:field_content] }},
        {:field_name => "server_host_key_algorithm length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "server_host_key_algorithm string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "server_host_key_algorithm length"}[:field_content] }},
        {:field_name => "encryption_algorithms_client_to_server length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "encryption_algorithms_client_to_server string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "encryption_algorithms_client_to_server length"}[:field_content] }},
        {:field_name => "encryption_algorithms_server_to_client length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "encryption_algorithms_server_to_client string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "encryption_algorithms_server_to_client length"}[:field_content] }},
        {:field_name => "mac_algorithms_client_to_server length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "mac_algorithms_client_to_server string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "mac_algorithms_client_to_server length"}[:field_content] }},
        {:field_name => "mac_algorithms_server_to_client length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "mac_algorithms_server_to_client string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "mac_algorithms_server_to_client length"}[:field_content] }},
        {:field_name => "compression_algorithms_client_to_server length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "compression_algorithms_client_to_server string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "compression_algorithms_client_to_server length"}[:field_content] }},
        {:field_name => "compression_algorithms_server_to_client length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "compression_algorithms_server_to_client string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "compression_algorithms_server_to_client length"}[:field_content] }},
        {:field_name => "languages_client_to_server length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "languages_client_to_server string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "languages_client_to_server length"}[:field_content] }},
        {:field_name => "languages_server_to_client length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "languages_server_to_client string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "languages_server_to_client length"}[:field_content] }},
        {:field_name => "First KEX Packet Follows", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Reserved", :field_size => 4, :field_type => :OCT_FIELD, :field_content => 0},
        {:field_name => "Padding String", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0,
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Padding length"}[:field_content] } },
    ]
    output_str_ary += PrintDataByDataStructDescription(data_format, data)
    total_size = 0
    data_format.each do |item|
        total_size += item[:field_size]
    end
    yield total_size if block_given?
    output_str_ary[1] += " [Total : %d bytes ] " % total_size
    output_str_ary
end


def PrintECDHKeyExchangeInit(data, direction)
    puts "PrintECDHKeyExchangeInit"
    output_str_ary = [
        "=======================================================================",
        ">>PrintECDHKeyExchangeInit   " + direction, 
        "-----------------------------------------------------------------------"]

    data_format = [
        {:field_name => "Packet length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Padding length", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Message Code", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "ECDH client's ephemeral public key length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "ECDH client's ephemeral public key (Q_C)", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0, 
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "ECDH client's ephemeral public key length"}[:field_content] }},
        {:field_name => "Padding String", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0,
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Padding length"}[:field_content] } },
    ]
    output_str_ary += PrintDataByDataStructDescription(data_format, data)
    total_size = 0
    data_format.each do |item|
        total_size += item[:field_size]
    end
    yield total_size if block_given?
    output_str_ary[1] += " [Total : %d bytes ] " % total_size
    output_str_ary
end

def PrintECDHKeyExchangeReply(data, direction)
    puts "PrintECDHKeyExchangeReply"
    output_str_ary = [
        "=======================================================================",
        ">>PrintECDHKeyExchangeReply   " + direction, 
        "-----------------------------------------------------------------------"]
    
    data_format = [
        {:field_name => "Packet length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Padding length", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Message Code", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Host key length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Host key type length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Host Key type string", :field_size => 0, :field_type => :STR_FIELD, :field_content => 0,
             :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Host key type length"}[:field_content] } },
        {:field_name => "Multi Precision Integer Length for e", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "RSA public exponent (e)", :field_size => 0, :field_type => :NUM_FIELD, :field_content => 0,
             :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Multi Precision Integer Length for e"}[:field_content] } },
        {:field_name => "Multi Precision Integer Length for n", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "RSA modulus (n)", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0,
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Multi Precision Integer Length for n"}[:field_content] } },
        {:field_name => "ECDH server's ephemeral public key length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "ECDH server's ephemeral public key (Q_S)", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0,
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "ECDH server's ephemeral public key length"}[:field_content] } },
        {:field_name => "KEX H signature length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "KEX H signature", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0,
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "KEX H signature length"}[:field_content] } },
        {:field_name => "Padding String", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0,
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Padding length"}[:field_content] } },
    ]
    output_str_ary += PrintDataByDataStructDescription(data_format, data)
    total_size = 0
    data_format.each do |item|
        total_size += item[:field_size]
    end
    yield total_size if block_given?
    output_str_ary[1] += " [Total : %d bytes ]" % total_size
    output_str_ary
end


def PrintNewKeys(data, direction)
    puts "PrintNewKeys"
    output_str_ary = [
        "=======================================================================",
        ">>PrintNewKeys    " + direction, 
        "-----------------------------------------------------------------------"]
    
    data_format = [
        {:field_name => "Packet length", :field_size => 4, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Padding length", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Message Code", :field_size => 1, :field_type => :NUM_FIELD, :field_content => 0},
        {:field_name => "Padding String", :field_size => 0, :field_type => :OCT_FIELD, :field_content => 0,
            :filed_update => ->() { data_format.detect{|item| item[:field_name] == "Padding length"}[:field_content] } },
    ]
    output_str_ary += PrintDataByDataStructDescription(data_format, data)
    total_size = 0
    data_format.each do |item|
        total_size += item[:field_size]
    end
    yield total_size if block_given?
    output_str_ary[1] += " [Total : %d bytes ] " % total_size
    output_str_ary
end


=begin
data_buf = [
    0x53, 0x53, 0x48, 0x2D, 0x32, 0x2E, 0x30, 0x2D, 0x6C, 0x69, 0x62, 0x73, 0x73, 0x68, 0x5F, 0x30,
    0x2E, 0x37, 0x2E, 0x35, 0x0D, 0x0A]
data_str = PrintSSHHello(data_buf, "<Client->Server>")
PrintAllStr(data_str)

data_buf = [
    0x53, 0x53, 0x48, 0x2D, 0x32, 0x2E, 0x30, 0x2D, 0x4F, 0x70, 0x65, 0x6E, 0x53, 0x53, 0x48, 0x5F,
    0x36, 0x2E, 0x36, 0x2E, 0x31, 0x0D, 0x0A]
data_str = PrintSSHHello(data_buf, "<Server->Client>")
PrintAllStr(data_str)

data_buf = [
    0x00, 0x00, 0x02, 0xE4, 0x06, 0x14, 0xAE, 0x2A, 0x87, 0x3D, 0xA6, 0x4B, 0x2C, 0x6C, 0x85, 0x0E,
    0x2A, 0x2B, 0x48, 0x57, 0xB8, 0xD8, 0x00, 0x00, 0x00, 0x54, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
    0x2D, 0x68, 0x65, 0x6C, 0x6C, 0x6D, 0x61, 0x6E, 0x2D, 0x67, 0x72, 0x6F, 0x75, 0x70, 0x2D, 0x65,
    0x78, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x2C, 0x65,
    0x63, 0x64, 0x68, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35,
    0x36, 0x2C, 0x63, 0x75, 0x72, 0x76, 0x65, 0x32, 0x35, 0x35, 0x31, 0x39, 0x2D, 0x73, 0x68, 0x61,
    0x32, 0x35, 0x36, 0x40, 0x6C, 0x69, 0x62, 0x73, 0x73, 0x68, 0x2E, 0x6F, 0x72, 0x67, 0x00, 0x00,
    0x00, 0x27, 0x73, 0x73, 0x68, 0x2D, 0x72, 0x73, 0x61, 0x2C, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2D,
    0x73, 0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2C, 0x73, 0x73,
    0x68, 0x2D, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x65, 0x73,
    0x31, 0x32, 0x38, 0x2D, 0x63, 0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2D, 0x63,
    0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2D, 0x67, 0x63, 0x6D, 0x40, 0x6F, 0x70,
    0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36,
    0x2D, 0x67, 0x63, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D,
    0x2C, 0x33, 0x64, 0x65, 0x73, 0x2D, 0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x65, 0x73,
    0x31, 0x32, 0x38, 0x2D, 0x63, 0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x39, 0x32, 0x2D, 0x63,
    0x74, 0x72, 0x2C, 0x61, 0x65, 0x73, 0x31, 0x32, 0x38, 0x2D, 0x67, 0x63, 0x6D, 0x40, 0x6F, 0x70,
    0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x61, 0x65, 0x73, 0x32, 0x35, 0x36,
    0x2D, 0x67, 0x63, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D,
    0x2C, 0x33, 0x64, 0x65, 0x73, 0x2D, 0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0xB1, 0x68, 0x6D, 0x61,
    0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 0x35, 0x36, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D,
    0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x36, 0x34,
    0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61,
    0x63, 0x2D, 0x31, 0x32, 0x38, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F,
    0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 0x35, 0x36, 0x2D,
    0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C,
    0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 0x2D, 0x65, 0x74,
    0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D,
    0x61, 0x63, 0x2D, 0x36, 0x34, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73,
    0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x31, 0x32, 0x38, 0x2D, 0x65,
    0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00,
    0x00, 0xB1, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 0x35, 0x36, 0x2C,
    0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 0x2C, 0x75, 0x6D,
    0x61, 0x63, 0x2D, 0x36, 0x34, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F,
    0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x31, 0x32, 0x38, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73,
    0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32,
    0x2D, 0x32, 0x35, 0x36, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68,
    0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35,
    0x31, 0x32, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63,
    0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D, 0x36, 0x34, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F,
    0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x2C, 0x75, 0x6D, 0x61, 0x63, 0x2D,
    0x31, 0x32, 0x38, 0x2D, 0x65, 0x74, 0x6D, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E,
    0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x15, 0x6E, 0x6F, 0x6E, 0x65, 0x2C, 0x7A, 0x6C, 0x69, 0x62,
    0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73, 0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x15,
    0x6E, 0x6F, 0x6E, 0x65, 0x2C, 0x7A, 0x6C, 0x69, 0x62, 0x40, 0x6F, 0x70, 0x65, 0x6E, 0x73, 0x73,
    0x68, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
data_str = PrintKeyExchangeInit(data_buf, "<Server->Client>")
PrintAllStr(data_str)

data_buf = [
    0x00, 0x00, 0x01, 0x64, 0x06, 0x14, 0xF0, 0x47, 0x29, 0x31, 0x44, 0x30, 0xD9, 0xA1, 0x1F, 0x86,
    0xDF, 0xEE, 0x19, 0x65, 0x17, 0x4C, 0x00, 0x00, 0x00, 0x66, 0x65, 0x63, 0x64, 0x68, 0x2D, 0x73,
    0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2C, 0x63, 0x75, 0x72,
    0x76, 0x65, 0x32, 0x35, 0x35, 0x31, 0x39, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x40, 0x6C,
    0x69, 0x62, 0x73, 0x73, 0x68, 0x2E, 0x6F, 0x72, 0x67, 0x2C, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65,
    0x2D, 0x68, 0x65, 0x6C, 0x6C, 0x6D, 0x61, 0x6E, 0x2D, 0x67, 0x72, 0x6F, 0x75, 0x70, 0x31, 0x34,
    0x2D, 0x73, 0x68, 0x61, 0x31, 0x2C, 0x64, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2D, 0x68, 0x65, 0x6C,
    0x6C, 0x6D, 0x61, 0x6E, 0x2D, 0x67, 0x72, 0x6F, 0x75, 0x70, 0x31, 0x2D, 0x73, 0x68, 0x61, 0x31,
    0x00, 0x00, 0x00, 0x57, 0x73, 0x73, 0x68, 0x2D, 0x72, 0x73, 0x61, 0x2C, 0x73, 0x73, 0x68, 0x2D,
    0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x2C, 0x65, 0x63, 0x64, 0x73, 0x61, 0x2D, 0x73, 0x68,
    0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x32, 0x35, 0x36, 0x2C, 0x65, 0x63, 0x64, 0x73,
    0x61, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70, 0x33, 0x38, 0x34, 0x2C,
    0x65, 0x63, 0x64, 0x73, 0x61, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x6E, 0x69, 0x73, 0x74, 0x70,
    0x35, 0x32, 0x31, 0x2C, 0x73, 0x73, 0x68, 0x2D, 0x64, 0x73, 0x73, 0x00, 0x00, 0x00, 0x08, 0x33,
    0x64, 0x65, 0x73, 0x2D, 0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0x08, 0x33, 0x64, 0x65, 0x73, 0x2D,
    0x63, 0x62, 0x63, 0x00, 0x00, 0x00, 0x25, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32,
    0x2D, 0x32, 0x35, 0x36, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35,
    0x31, 0x32, 0x2C, 0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x25,
    0x68, 0x6D, 0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x32, 0x35, 0x36, 0x2C, 0x68, 0x6D,
    0x61, 0x63, 0x2D, 0x73, 0x68, 0x61, 0x32, 0x2D, 0x35, 0x31, 0x32, 0x2C, 0x68, 0x6D, 0x61, 0x63,
    0x2D, 0x73, 0x68, 0x61, 0x31, 0x00, 0x00, 0x00, 0x04, 0x6E, 0x6F, 0x6E, 0x65, 0x00, 0x00, 0x00,
    0x04, 0x6E, 0x6F, 0x6E, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
data_str = PrintKeyExchangeInit(data_buf, "<Client->Server>")
PrintAllStr(data_str)

data_buf = [
    0x00, 0x00, 0x00, 0x4C, 0x05, 0x1E, 0x00, 0x00, 0x00, 0x41, 0x04, 0x2C, 0x0D, 0xC9, 0xB4, 0xCA,
    0x0B, 0xDB, 0x20, 0x29, 0x58, 0xA5, 0x3F, 0xA4, 0x48, 0x13, 0x1A, 0xBA, 0xFB, 0x19, 0x2E, 0x34,
    0x50, 0x75, 0xC3, 0xFC, 0xB4, 0x9E, 0x72, 0x58, 0xC0, 0xAD, 0xEB, 0xF4, 0x08, 0x66, 0x8D, 0x61,
    0x6D, 0x36, 0x63, 0x5C, 0x8D, 0x52, 0xD2, 0xD2, 0xA1, 0xE1, 0xBC, 0x42, 0xA6, 0x0B, 0x68, 0x17,
    0x37, 0xF6, 0x25, 0xB3, 0x16, 0xBB, 0x37, 0x72, 0x36, 0x3B, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00]
data_str = PrintECDHKeyExchangeInit(data_buf, "<Client->Server>")
PrintAllStr(data_str)

data_buf = [
    0x00, 0x00, 0x02, 0x7C, 0x07, 0x1F, 0x00, 0x00, 0x01, 0x17, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73,
    0x68, 0x2D, 0x72, 0x73, 0x61, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01,
    0x00, 0xC3, 0x6B, 0x15, 0x49, 0x30, 0x31, 0x59, 0xEC, 0xC4, 0x50, 0x4C, 0x46, 0x08, 0x80, 0x37,
    0xCC, 0x11, 0xD8, 0x8D, 0xFD, 0x21, 0xDF, 0x39, 0xBE, 0x80, 0x67, 0x31, 0x4F, 0xA0, 0xBA, 0x37,
    0x1C, 0xE3, 0x29, 0xA3, 0xF9, 0x02, 0x56, 0xA4, 0xF5, 0x2D, 0x81, 0x95, 0xA9, 0x7D, 0xFA, 0x4F,
    0x76, 0xC6, 0xCF, 0xAF, 0xF6, 0xD1, 0x2E, 0xE8, 0x7B, 0x87, 0x4C, 0x9B, 0xAB, 0xDE, 0x19, 0xF0,
    0xB7, 0x7D, 0x26, 0x5C, 0x5E, 0x1D, 0x41, 0x00, 0xDA, 0x87, 0x99, 0x4B, 0xA8, 0x97, 0xEF, 0x1C,
    0x62, 0x0A, 0xC4, 0xEE, 0x21, 0x8D, 0xA4, 0x04, 0xDF, 0x51, 0x7E, 0x99, 0x62, 0x62, 0x4B, 0xF2,
    0xF8, 0xFF, 0x19, 0x9D, 0xBC, 0x0B, 0x22, 0xD6, 0x4B, 0xBC, 0xAD, 0x03, 0x0B, 0x6F, 0x83, 0x7F,
    0xFE, 0x0B, 0xFB, 0x4A, 0x69, 0xE4, 0x43, 0x0C, 0xF7, 0x98, 0x51, 0x47, 0x48, 0x14, 0x71, 0x4D,
    0x12, 0xF0, 0x39, 0x6A, 0x79, 0xCF, 0x25, 0x1A, 0x86, 0x2C, 0x04, 0xCA, 0xF5, 0x0B, 0x4B, 0xEC,
    0xF2, 0xBA, 0x69, 0x27, 0x45, 0x7F, 0x10, 0x86, 0x51, 0xBE, 0x01, 0x5E, 0xDC, 0xBF, 0x7C, 0x8E,
    0x17, 0xB2, 0xF4, 0x53, 0x7E, 0x44, 0xA2, 0x39, 0x85, 0xF8, 0xB2, 0x5C, 0xF8, 0x87, 0x36, 0x6C,
    0x35, 0xE5, 0x49, 0x73, 0x2F, 0xCF, 0xB2, 0x0D, 0xC2, 0x38, 0xDE, 0xBA, 0x0B, 0x4E, 0xDC, 0xDD,
    0xF9, 0x67, 0x68, 0x37, 0xBB, 0x24, 0x75, 0xB8, 0x58, 0x65, 0x8D, 0x66, 0x1D, 0xC7, 0x2B, 0x37,
    0x24, 0xE1, 0xFB, 0x29, 0x77, 0xAC, 0xE6, 0xCD, 0xD9, 0x0D, 0xFA, 0xC6, 0x03, 0xDE, 0x9A, 0x5D,
    0x96, 0xCF, 0xC5, 0xF8, 0x82, 0x37, 0xE5, 0x73, 0xF7, 0x64, 0x95, 0x0B, 0xCC, 0xF0, 0xA9, 0x74,
    0x1F, 0x0B, 0xF2, 0x7B, 0x51, 0x64, 0x0D, 0xD3, 0x02, 0x81, 0x96, 0x24, 0xCA, 0x2A, 0xF2, 0x82,
    0xFF, 0x00, 0x00, 0x00, 0x41, 0x04, 0x25, 0xE8, 0xDB, 0x4A, 0x3F, 0xD9, 0xD2, 0xBF, 0xB9, 0x91,
    0xCF, 0x2C, 0x2A, 0x83, 0x6B, 0x80, 0x0C, 0x0C, 0x83, 0xD9, 0xB1, 0x59, 0x94, 0x7D, 0x67, 0xDD,
    0x7F, 0xF1, 0xEA, 0x06, 0xC3, 0xC8, 0xA6, 0x75, 0x54, 0x5A, 0xA2, 0xFC, 0x6F, 0x6F, 0x31, 0x73,
    0x87, 0xFE, 0x92, 0xA6, 0x94, 0x48, 0x04, 0xC8, 0x85, 0x55, 0x45, 0x1B, 0x1F, 0xA9, 0x2C, 0x04,
    0xC6, 0xF8, 0x23, 0x39, 0x95, 0xD8, 0x00, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x00, 0x07, 0x73, 0x73,
    0x68, 0x2D, 0x72, 0x73, 0x61, 0x00, 0x00, 0x01, 0x00, 0x13, 0xA6, 0x29, 0xCC, 0x0E, 0x67, 0x65,
    0xDF, 0x88, 0xC9, 0x33, 0x75, 0x71, 0x7E, 0x7E, 0x16, 0x94, 0xB8, 0xD4, 0x45, 0x9D, 0x92, 0x25,
    0x57, 0x40, 0xC0, 0xC7, 0xB8, 0xE6, 0x29, 0x63, 0xE6, 0x47, 0x05, 0x99, 0xA9, 0xC7, 0xEC, 0x57,
    0x9C, 0x02, 0x02, 0xD8, 0x5C, 0x51, 0xF6, 0x39, 0x1B, 0x71, 0xC1, 0x9C, 0xA7, 0xB4, 0x80, 0x04,
    0x15, 0xDE, 0x2A, 0x78, 0x08, 0xDF, 0x40, 0x1E, 0xB2, 0xB2, 0x83, 0x64, 0x9A, 0xB8, 0x15, 0x16,
    0x85, 0x01, 0xDC, 0xE3, 0x17, 0x00, 0x68, 0xD4, 0x8A, 0xB7, 0x11, 0xAB, 0x57, 0x62, 0x88, 0xB6,
    0xEB, 0xC0, 0x58, 0x9F, 0x95, 0x9C, 0xF5, 0xD3, 0x0A, 0x60, 0xCC, 0xFD, 0x8D, 0x84, 0xD2, 0x9B,
    0x47, 0xF1, 0xDB, 0x35, 0xEE, 0x5E, 0x60, 0x87, 0x42, 0x4F, 0xE0, 0x9B, 0x0A, 0x38, 0x26, 0xA4,
    0x9F, 0xA8, 0x85, 0x52, 0xEB, 0x18, 0x4E, 0xC1, 0x66, 0x4B, 0xDE, 0x2F, 0xD3, 0x8A, 0xC5, 0xD6,
    0x2F, 0x42, 0x58, 0x32, 0xB7, 0x55, 0x53, 0x22, 0xAD, 0xE5, 0x2F, 0x16, 0x61, 0x3F, 0xE7, 0xF6,
    0x68, 0xF8, 0x93, 0xEE, 0x12, 0x26, 0x9D, 0x3E, 0xC7, 0x94, 0xEF, 0x62, 0xC9, 0xDD, 0xD9, 0x0B,
    0x6B, 0xDA, 0xBC, 0xBE, 0x2F, 0x34, 0x9F, 0x5E, 0xDF, 0x26, 0x92, 0x40, 0x6B, 0xE6, 0x48, 0xA5,
    0x5C, 0x5A, 0xA8, 0x17, 0x30, 0x38, 0x81, 0xD6, 0xB2, 0xC5, 0x99, 0x00, 0xD6, 0x0D, 0xB6, 0x93,
    0xA0, 0x1F, 0x74, 0xBE, 0xE0, 0x23, 0x1D, 0x40, 0xA8, 0xC3, 0xF6, 0xF3, 0x6F, 0xC4, 0xC9, 0xB1,
    0x6F, 0xAC, 0x1D, 0xCD, 0xB1, 0x31, 0xC9, 0x74, 0x41, 0x0D, 0x43, 0x21, 0x2A, 0x8A, 0x25, 0xA3,
    0x8C, 0x6F, 0xBE, 0xD6, 0xCE, 0xC4, 0xE3, 0x8D, 0x7E, 0xAA, 0x61, 0xA1, 0x8B, 0xC9, 0xB7, 0x94,
    0x98, 0xDC, 0xC3, 0x8C, 0xD6, 0xDF, 0x23, 0x17, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0C, 0x0A, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,]
data_str = PrintECDHKeyExchangeReply(data_buf, "<Server->Client>")
PrintAllStr(data_str)

data_buf = [
    0x00, 0x00, 0x00, 0x0C, 0x0A, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xA7, 0x1C, 0x32, 0x45, 0xF4, 0xD0, 0x29, 0x31, 0xEE, 0x88, 0x3E, 0x45, 0xD1, 0xB4, 0x0C, 0x68,
    0x71, 0xEE, 0xD4, 0x2B, 0xD2, 0x6B, 0xFC, 0x53, 0xF1, 0xC5, 0xD8, 0x7E, 0x39, 0x67, 0x8E, 0x17,
    0x6D, 0x14, 0x0F, 0xE2, 0x0A, 0xD7, 0xF5, 0x5F, 0xE0, 0x4F, 0xB7, 0xD3, 0x4F, 0x87, 0x23, 0x3B,
    0xA2, 0xB1, 0x9C, 0xD5, 0x58, 0x0B, 0x81, 0x90, 0x58, 0x19, 0x7F, 0x01, 0x0C, 0xC2, 0xA1, 0x64,]
data_str = PrintNewKeys(data_buf, "<Client->Server>")
PrintAllStr(data_str)

=end
def PrintUnknowData(data, direction) 
    puts "PrintUnknowData"
    output_str_ary = [
        "=======================================================================",
        ">>PrintUnknowData  (Maybe encrypted) " + direction,
        "-----------------------------------------------------------------------"]
    yield data.size if block_given?
    output_str_ary[1] += " [Total : %d bytes ] " % data.size
    output_str_ary += PrintFormatBinData(data, 16).AddIndentToStrs(" " * 4)
end

def DirectionString(is_to_server) 
    is_to_server ? "| Client ------> Server |" : "| Server ------> Client |"
end

@print_start_info = [
    :PrintSSHHello,
    :PrintSSHHello
]

@print_ary_by_msg_code = {
    20 => :PrintKeyExchangeInit,
    30 => :PrintECDHKeyExchangeInit,
    31 => :PrintECDHKeyExchangeReply,
    21 => :PrintNewKeys
}

@method_idx = 0
@output_to_file = []


def ParseSSHProtocolData(data_buf, is_send_to_server, log_idx)
    #data_buf.each do |item|
    #    puts item
    #end
    data_ary = []
    data_buf.each do |item|
        temp = item.split(/ /)
        temp.select! {|item| item =~ /[0-9a-fA-F][0-9a-fA-F]/ }
        temp.map! {|item| item.to_i(16) }
        data_ary += temp
    end

    puts "Total data size : " + data_ary.size.to_s
    data_remain = data_ary.size
    
    @output_to_file.push "\n======================= From Log line : %d ===========================" % log_idx
    while data_remain > 0
        if @method_idx < @print_start_info.size then
            @output_to_file += send(@print_start_info[@method_idx], data_ary, DirectionString(is_send_to_server)) do |data_size|
                                        puts "Parsed data size" + data_size.to_s
                                        data_remain -= data_size
                                        puts "Remained data size" + data_remain.to_s
                                    end
            @method_idx += 1
        else
            method_sym = @print_ary_by_msg_code[data_ary[5]]
            if method_sym == nil then
                @output_to_file += PrintUnknowData(data_ary, DirectionString(is_send_to_server))
                return 
            end
            @output_to_file += send(@print_ary_by_msg_code[data_ary[5]], data_ary, DirectionString(is_send_to_server)) do |data_size|
                                        puts "Parsed data size" + data_size.to_s
                                        data_remain -= data_size
                                        puts "Remained data size" + data_remain.to_s
                                    end
        end
        if data_remain > 0 then
            data_ary = data_ary[data_ary.size - data_remain, data_remain]
        end
    end
end



puts "Start Parsing!"

puts ARGV.size
ARGV.each {|item| puts item }

if ARGV.size >= 1 and ARGV[0] =~ /.*\.txt/
    log_file_list = [ARGV[0]]
else
    log_file_list = Dir["./*.txt"]
end

log_file_list.each do | log_file_name |
    if log_file_name =~ /(.*)\.txt/
        f = File.new($1 + "_parsed.txt", "w") 
        puts "Parsing #{$1}"
        is_transmit_data = false
        is_send = false
        data_buf = []
        data_log_index = 0
        File.open(log_file_name, "r") do |fh| 
            fh.each_line.with_index(1) do |line, index|
                if is_transmit_data && line =~ /^[0-9a-fA-F][0-9a-fA-F]/ then
                    data_buf.push line
                elsif !data_buf.empty?
                    ParseSSHProtocolData(data_buf, is_send, data_log_index)
                    data_buf = []
                end

                case line
                when /.*UbloxSSHDataSendStart.*/    then is_transmit_data = true; data_log_index = index; is_send = true;
                when /.*UbloxSSHDataSendStop.*/     then is_transmit_data = false
                when /.*UbloxSSHDataRecieveStart.*/ then is_transmit_data = true; data_log_index = index; is_send = false;
                when /.*UbloxSSHDataRecieveStop.*/  then is_transmit_data = false
                end
            end
            @output_to_file.each do |line|
                f.print (line + "\n")
            end
            @output_to_file = []
        end
    end
end

